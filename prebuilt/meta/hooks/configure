#!/bin/sh

# TODO(tvoss): We should add a mechanism
# to list all the keys supported by locationd and
# its in-tree providers.

export LD_LIBRARY_PATH="$SNAP/lib:$SNAP/usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH"
export LD_LIBRARY_PATH=$SNAP_LIBRARY_PATH:$LD_LIBRARY_PATH

ubx_enable=$(snapctl get ubx.provider.enable)
ubx_device=$(snapctl get ubx.provider.device)
ubx_protocol=$(snapctl get ubx.provider.protocol)
ubx_assist_enable=$(snapctl get ubx.provider.assistnow.enable)
ubx_assist_token=$(snapctl get ubx.provider.assistnow.token)
ubx_assist_timeout=$(snapctl get ubx.provider.assistnow.timeout)

sirf_enable=$(snapctl get sirf.provider.enable)
sirf_device=$(snapctl get sirf.provider.device)
sirf_protocol=$(snapctl get sirf.provider.protocol)

mls_enable=$(snapctl get mls.provider.enable)
mls_host=$(snapctl get mls.provider.host)
mls_api_key=$(snapctl get mls.provider.apikey)

if [ -n "$ubx_enable" ]; then
    "$SNAP"/bin/locationd set --key=ubx.provider.enable --value="$ubx_enable"
fi

if [ -n "$ubx_device" ]; then
    "$SNAP"/bin/locationd set --key=ubx.provider.device --value="$ubx_device"
fi

if [ -n "$ubx_protocol" ]; then
    "$SNAP"/bin/locationd set --key=ubx.provider.protocol --value="$ubx_protocol"
fi

if [ -n "$ubx_assist_enable" ]; then
    "$SNAP"/bin/locationd set --key=ubx.provider.assist_now.enable --value="$ubx_assist_enable"
fi

if [ -n "$ubx_assist_token" ]; then
    "$SNAP"/bin/locationd set --key=ubx.provider.assist_now.token --value="$ubx_assist_token"
fi

if [ -n "$ubx_assist_timeout" ]; then
    "$SNAP"/bin/locationd set --key=ubx.provider.assist_now.timeout --value="$ubx_assist_timeout"
fi

if [ -n "$sirf_enable" ]; then
    "$SNAP"/bin/locationd set --key=sirf.provider.enable --value="$sirf_enable"
fi

if [ -n "$sirf_device" ]; then
    "$SNAP"/bin/locationd set --key=sirf.provider.device --value="$sirf_device"
fi

if [ -n "$sirf_protocol" ]; then
    "$SNAP"/bin/locationd set --key=sirf.provider.protocol --value="$sirf_protocol"
fi

# Disable Mozilla Location Service provider by default to prevent
# us from talking to a remote location service without the user
# acknowledging this.
if [ -z "$mls_enable" ]; then
    mls_enable="false"
fi

if [ -n "$mls_enable" ]; then
    "$SNAP"/bin/locationd set --key=mls.provider.enable --value="$mls_enable"
fi

if [ -n "$mls_host" ]; then
    "$SNAP"/bin/locationd set --key=mls.provider.host --value="$mls_host"
fi

if [ -n "$mls_api_key" ]; then
    "$SNAP"/bin/locationd set --key=mls.provider.api_key --value="$mls_api_key"
fi
